// Code generated by MockGen. DO NOT EDIT.
// Source: ./email.go

// Package email is a generated GoMock package.
package email

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gomail "gopkg.in/gomail.v2"
)

// MockEmailDialer is a mock of EmailDialer interface.
type MockEmailDialer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailDialerMockRecorder
}

// MockEmailDialerMockRecorder is the mock recorder for MockEmailDialer.
type MockEmailDialerMockRecorder struct {
	mock *MockEmailDialer
}

// NewMockEmailDialer creates a new mock instance.
func NewMockEmailDialer(ctrl *gomock.Controller) *MockEmailDialer {
	mock := &MockEmailDialer{ctrl: ctrl}
	mock.recorder = &MockEmailDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailDialer) EXPECT() *MockEmailDialerMockRecorder {
	return m.recorder
}

// DialAndSend mocks base method.
func (m_2 *MockEmailDialer) DialAndSend(m ...*gomail.Message) error {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "DialAndSend", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DialAndSend indicates an expected call of DialAndSend.
func (mr *MockEmailDialerMockRecorder) DialAndSend(m ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialAndSend", reflect.TypeOf((*MockEmailDialer)(nil).DialAndSend), m...)
}
