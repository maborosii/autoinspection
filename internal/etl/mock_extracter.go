// Code generated by MockGen. DO NOT EDIT.
// Source: /home/bonbon/go_dep/pkg/mod/github.com/prometheus/common@v0.32.1/model/value.go

// Package etl is a generated GoMock package.
// mock prometheus api提供的返回值
package etl

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/prometheus/common/model"
)

// MockValue is a mock of Value interface.
type MockValue struct {
	ctrl     *gomock.Controller
	recorder *MockValueMockRecorder
}

// MockValueMockRecorder is the mock recorder for MockValue.
type MockValueMockRecorder struct {
	mock *MockValue
}

// NewMockValue creates a new mock instance.
func NewMockValue(ctrl *gomock.Controller) *MockValue {
	mock := &MockValue{ctrl: ctrl}
	mock.recorder = &MockValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValue) EXPECT() *MockValueMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockValue) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockValueMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockValue)(nil).String))
}

// Type mocks base method.
func (m *MockValue) Type() model.ValueType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(model.ValueType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockValueMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockValue)(nil).Type))
}
